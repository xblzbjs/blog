<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book-notes on xblzbjs</title>
    <link>https://xblzbjs.cn/book-notes/</link>
    <description>Recent content in Book-notes on xblzbjs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 24 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xblzbjs.cn/book-notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>启示录-打造用户喜爱的产品(产品篇)</title>
      <link>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E4%BA%A7%E5%93%81%E7%AF%87/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E4%BA%A7%E5%93%81%E7%AF%87/</guid>
      <description>产品篇    苹果公司值得学习的四点     硬件为软件服务 软件为用户体验服务 用户体验为情感服务 产品为真正的需求服务  提防有特殊要求的产品    客户在描述需求时，习惯提出自己的解决方案，但不一定抓住了需求的本质。产品经理应该与客户一起梳理需求，发现问题的本质，提供更合理的解决方案。多数用户其实不喜欢定制软件，他们更喜欢通用产品，因为通用产品的兼容性、数据移植性更好，改进速度更快，也更容易获得技术支持。
新瓶装老酒    成功的产品往往不是什么新鲜事物，只是新瓶装老酒，之所以成功，是因为这个“新瓶”做得更好、更方便、更便宜，改变了消费者对“老酒”的印象。
想在成熟的市场抢占一席之地，精明的公司至少要手握两件“法宝”：
 对目标市场了如指掌，对现有产品的缺陷洞若观火。通过产品可用性测试掌握产品情况 跟踪最新的技术趋势。  大众网络服务产品    电子商务、社交网络、搜索引擎、网络游戏
 可用性 人物角色 扩展性 持续可用性 客户服务 保护用户隐私 口碑营销 全球化 平滑部署 用户社区管理  最佳实践经验    打造富有创意产品最重要的十个要点
 产品管理的职责 用户体验 机会评估 特约用户 产品原则 人物角色 探索产品 使用原型 用户参与原型测试 根据数据改进产品  产品经理的反省清单    出色的产品经理会时刻关注产品的现状与未来。以下是产品经理无时无刻不在思考的问题
 产品能吸引目标消费者的关注吗？ 产品的设计是否人性化，是否易于操作？ 产品能在竞争中取胜吗？即使是面对未来风云变化的市场，依旧有取胜的把握吗？ 我了解目标用户吗？产品（不是理想的产品，而是实际开发出来的产品）是否能得到他们的认可？ 产品是否有别于市面上的其他产品？我能在两分钟内向公司高管清楚地阐明这些差别吗？能在一分钟内向客户解释清楚吗？能在半分钟内向经验丰富的行业分析师解释清楚吗？ 产品能正常运行吗？ 产品是否完整？用户对产品的印象如何？销售业绩如何？销售任务能否顺利完成？ 产品的特色是否与目标用户的需求一致？产品特色是否鲜明？ 产品值钱吗？值多少钱？为什么值这么多钱？用户会选择更便宜的产品吗？ 我了解其他团队成员对产品的看法吗？他们觉得产品好在哪里？他们的看法是否与我的观点一致。  </description>
    </item>
    
    <item>
      <title>启示录-打造用户喜爱的产品(人员篇)</title>
      <link>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E4%BA%BA%E5%91%98%E7%AF%87/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E4%BA%BA%E5%91%98%E7%AF%87/</guid>
      <description>关键角色及其职责    1. 产品经理    主要职责
 评估产品机会（product opportunity）  产品需求文档(market requirements document, MRD)结合产品原型 机会评估(opportunity assessment)   定义要开发的产品  基本的产品特征和功能 产品的用户的体验 产品的发布标准    2. 用户体验设计师    主要职责
 与产品经理密切合作，将功能与设计相结合，满足用户需求，确保产品同时具有可用性和价值  注：产品的用户体验是公司的核心竞争力；交互设计不能外包，质量检验更适合外包
3. 项目管理人员    主要职责
 制定计划 跟踪进度  4. 开发团队    注：IT团队通常指的是为内部员工提供技术支持的团队，而开发团队指的是为外部客户开发和维护产品的团队。
5. 运维团队    6. 产品营销人员    主要职责
 对外发布信息、宣传产品 组织重点营销活动 促进产品销售提供支持  注：不推荐让一个人同时负责产品管理和产品营销</description>
    </item>
    
    <item>
      <title>启示录-打造用户喜爱的产品(流程篇)</title>
      <link>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E6%B5%81%E7%A8%8B%E7%AF%87/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E6%B5%81%E7%A8%8B%E7%AF%87/</guid>
      <description>开发富有创意的产品时反复应用的流程和成功的实践经验
评估产品机会    确定待解决的问题    产品经理应该能回答如下十个问题
 产品要解决什么问题？（产品价值※） 为谁解决这个问题？（目标市场） 成功的机会有多大？（市场规模） 怎样判断产品成功与否？（度量指标或收益指标） 有哪些同类产品？（竞争格局） 为什么我们最适合做这个产品？（竞争优势） 时机合适码？（市场时机） 如何把产品推向市场？（营销组合策略） 成功的必要条件是什么？（解决方案要满足的条件） 根据以上问题，给出评估结论（继续或放弃）  产品探索    定义正确的产品      在探索产品的阶段，产品经理负责分析各种创意，广泛搜集用户需求，了解如何运用新技术，拿出产品原型并加以测试，从全局视角思考产品方向，兼顾短期需求和长期规划。
  产品经理必须在执行阶段转换工作中心；否则，产品经理自己很可能成为产品上市的最大障碍。
  采用流水线方式并行开发产品。也就是说，一旦1.0版本的产品进入项目执行阶段，就开始定义2.0的产品。
  产品原则    产品原则是对团队信仰和价值观的总结，用来指导产品团队作出正确的决策和取舍。
确定什么最重要     罗列出产品原则，并按原则的重要性排序 切记原则过于空泛 切记将设计原则当成产品原则  解决意见冲突    在做产品决策之前，应该先确定决策要解决什么问题，让大家在以下几个要点上达成共识。
 究竟要解决什么问题？ 要为哪类人物角色解决这个问题？ 产品要达到什么目标 每项目标的优先级是什么？  产品评审团    制定决策通常是既耗时又费力的。产品公司需要一套机制让决策者和相关人员及时作出明智的产品决策，成立产品评审团是最好的解决途径之一。</description>
    </item>
    
    <item>
      <title>高效程序员的45个习惯:敏捷开发修炼之道</title>
      <link>https://xblzbjs.cn/book-notes/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/book-notes/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</guid>
      <description>有关敏捷       &amp;ldquo;敏捷&amp;quot;是一种把以人为本、团队合作、快速响应变化和可工作的软件作为宗旨的开发方法
    反馈是敏捷的基础。一旦你意识到走错了方向，就要立即做出决策，改变方向。
    过程符合标准并不意味结果是正确的。敏捷团队重结果胜于重过程。
   自我提升       你要不断从自己写的代码中得到反馈，并且使用自动化工具不断地构建（持续集成）和测试系统。在前进过程中，你都会有意识地修改一些代码：在功能不变的情况下，重新设计部分代码，改善代码的质量。这就是所谓的重构，它是软件开发中不可或缺的一部分——编码永远没有真正意义上的“结束”。
    先难后易。我们首先要解决困难的问题，把简单的问题留到最后.
    不要孤立地编码(Don’t code in isolation)
    要专业而不是自我
    迭代和增量式的学习。每天计划用一段时间来学习新技术，它不需要很长时间，但需要经常进行。记下那些你想学习的东西——当你听到一些不熟悉的术语或者短语时，简要地把它记录下来。然后在计划的时间中深入研究它。
    跟踪技术变化。你不需要精通所有技术，但需要清楚知道行业的动向，从而规划你的项目和职业生涯。
    你不可能精通每一项技术，没有必要去做这样的尝试。只要你在某些方面成为专家，就能使用同样的方法，很容易地成为新领域的专家。
    你要明白为什么需要这项新技术——它试图解决什么样的问题？它可以被用在什么地方？
    不停地问为什么。不能只满足于别人告诉你的表面现象。要不停地提问直到你明白问题的根源。</description>
    </item>
    
    <item>
      <title>程序员修炼之道</title>
      <link>https://xblzbjs.cn/book-notes/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E7%AC%AC2%E7%89%88/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/book-notes/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E7%AC%AC2%E7%89%88/</guid>
      <description>第一章 务实的哲学    1.不害怕承认无知和错误,不要把问题归咎于他人,不要找借口
2.承担责任.具体方式:任何你负责的事情应该考虑:
planA:最优方案;
planB:通常方案;
planC:应急方案
3.做项目,写代码不要得过且过,不拖拉,不放弃(这点吃了大亏,很多时候项目完成一半就不想再做下去).
4.不要只是因为一些东西非常紧急,就去造成附带伤害.(不要因为某一项模块或者功能很紧急就去破坏另一个模块甚至整个架构)
5.留意着大局,不要只顾着埋头写代码.
6.没有十全十美的软件和代码,完成80%功能上线,之后不断完善代码比完成100%功能再上线好.因为只有流量才能慢慢显示出不足,才能接着完善.不要让过度的修饰和精炼侵蚀掉一个完好的程序.
7.投资知识(重点)
每年学习一门新语言(最好至少掌握一门动态+一门静态)
每月读一本技术书
每个季度读一本非技术书(历史,地理,小说,文学等等)
每个季度学一门课(完成一个相关技术的项目.B站,慕课网,腾讯课堂,网易云课堂等)
加入相关技术的QQ群交流(人外有人,群里很多大佬),遇到不懂的问题就在上面问别拖
与时俱进,关心当前项目不同的技术.
8.批判性地分析你读到的和听到的东西,简而言之独立思考
9.寻找基础模型
10.交流(重点),程序员才不是木讷的!!!
了解听众的需求,兴趣,和能力
明白自己想说什么.用最少的话表达自己的意思
选择合适的时机与他人交流
适当倾听,懂得让别人参与你的话题
每个人的性格不同,做事方式不同,灵活调整表达方式.
不要口臭
11.非API的注释应只用来讨论其为何存在及其意图,目标.
第二章 务实的方法    1.信奉ETC（Easier To Change）原则。保存文件时、写测试时、修复Bug时常问自己：“我刚刚做的事情是让整个系统更容易改变还是更难改变？”
2.DRY原则：在一个系统中，每一处知识都必须单一、明确地表达。DRY针对的是对知识和意图的复制，而不是简单的复制粘贴（因此并非所有的代码重复都是知识的重复）。
3.不要依赖那些你无法控制的东西！！！！（不要使用超过自己理解的技术，维护起来会很困难）
4.设计与现实世界的变化有多大程度的解耦？
5.考虑在体系结构、部署和供应商集成方面保持灵活性
6.曳光弹式开发（核心思想：即时反馈）
7.收集需求、设计、编码、发布，这套传统的方法要在知道“需求是什么”的前提下才有效
8.对一个项目完成时间（模块功能的完成时间等）要有一个估算（时间、技术、突发状况、人员等）
9.根据代码不断迭代进度表
第三章 基础工具    1.好记性不如烂笔头（做一个项目最好做思维导图，开发中遇到的困难也记录下来）
2.定制专属于你的Shell以提高生产力
3.熟悉2款编辑器的使用，不要多但也不要只会1款
4.学好git（gitee和github都要回）
5.去解决问题，而不是责备
6.学会读那些该死的报错
7.完成一步，测试一步，再接着走
8.学会Markdown
第四章 务实的偏执    1.程序不会说谎，你错就是你错了
2.程序会崩溃，但别改成垃圾
3.使用断言去预防不可能的事情
4.管理好资源（有始有终）
5**.永远不要进行“太大”的步骤或任务**</description>
    </item>
    
  </channel>
</rss>
