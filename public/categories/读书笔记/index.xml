<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书笔记 on 行百里者半九十</title>
    <link>https://xblzbjs.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 读书笔记 on 行百里者半九十</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xblzbjs&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 27 May 2020 09:17:09 +0800</lastBuildDate><atom:link href="https://xblzbjs.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>读后感｜程序员修炼之道(第2版)</title>
      <link>https://xblzbjs.cn/article/2020/05/%E8%AF%BB%E5%90%8E%E6%84%9F%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E7%AC%AC2%E7%89%88/</link>
      <pubDate>Wed, 27 May 2020 09:17:09 +0800</pubDate>
      
      <guid>https://xblzbjs.cn/article/2020/05/%E8%AF%BB%E5%90%8E%E6%84%9F%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E7%AC%AC2%E7%89%88/</guid>
      <description>第一章 务实的哲学 1.不害怕承认无知和错误,不要把问题归咎于他人,不要找借口
2.承担责任.具体方式:任何你负责的事情应该考虑:
planA:最优方案;
planB:通常方案;
planC:应急方案
3.做项目,写代码不要得过且过,不拖拉,不放弃(这点吃了大亏,很多时候项目完成一半就不想再做下去).
4.不要只是因为一些东西非常紧急,就去造成附带伤害.(不要因为某一项模块或者功能很紧急就去破坏另一个模块甚至整个架构)
5.留意着大局,不要只顾着埋头写代码.
6.没有十全十美的软件和代码,完成80%功能上线,之后不断完善代码比完成100%功能再上线好.因为只有流量才能慢慢显示出不足,才能接着完善.不要让过度的修饰和精炼侵蚀掉一个完好的程序.
7.投资知识(重点)
每年学习一门新语言(最好至少掌握一门动态+一门静态)
每月读一本技术书
每个季度读一本非技术书(历史,地理,小说,文学等等)
每个季度学一门课(完成一个相关技术的项目.B站,慕课网,腾讯课堂,网易云课堂等)
加入相关技术的QQ群交流(人外有人,群里很多大佬),遇到不懂的问题就在上面问别拖
与时俱进,关心当前项目不同的技术.
8.批判性地分析你读到的和听到的东西,简而言之独立思考
9.寻找基础模型
10.交流(重点),程序员才不是木讷的!!!
了解听众的需求,兴趣,和能力
明白自己想说什么.用最少的话表达自己的意思
选择合适的时机与他人交流
适当倾听,懂得让别人参与你的话题
每个人的性格不同,做事方式不同,灵活调整表达方式.
不要口臭
11.非API的注释应只用来讨论其为何存在及其意图,目标.
第二章 务实的方法 1.信奉ETC（Easier To Change）原则。保存文件时、写测试时、修复Bug时常问自己：“我刚刚做的事情是让整个系统更容易改变还是更难改变？”
2.DRY原则：在一个系统中，每一处知识都必须单一、明确地表达。DRY针对的是对知识和意图的复制，而不是简单的复制粘贴（因此并非所有的代码重复都是知识的重复）。
3.不要依赖那些你无法控制的东西！！！！（不要使用超过自己理解的技术，维护起来会很困难）
4.设计与现实世界的变化有多大程度的解耦？
5.考虑在体系结构、部署和供应商集成方面保持灵活性
6.曳光弹式开发（核心思想：即时反馈）
7.收集需求、设计、编码、发布，这套传统的方法要在知道“需求是什么”的前提下才有效
8.对一个项目完成时间（模块功能的完成时间等）要有一个估算（时间、技术、突发状况、人员等）
9.根据代码不断迭代进度表
第三章 基础工具 1.好记性不如烂笔头（做一个项目最好做思维导图，开发中遇到的困难也记录下来）
2.定制专属于你的Shell以提高生产力
3.熟悉2款编辑器的使用，不要多但也不要只会1款
4.学好git（gitee和github都要回）
5.去解决问题，而不是责备
6.学会读那些该死的报错
7.完成一步，测试一步，再接着走
8.学会Markdown
第四章 务实的偏执 1.程序不会说谎，你错就是你错了
2.程序会崩溃，但别改成垃圾
3.使用断言去预防不可能的事情
4.管理好资源（有始有终）
5**.永远不要进行“太大”的步骤或任务**
第五章 宁弯不折 1.解耦代码让改变更加容易
2.不要链式调用方法
3.小心使用全局数据（是数据，不是变量！）：数据库、文件系统、API等等。
4.如果全局唯一非常重要，那么将它包装到API中。
5.针对传统的类继承的三个替代方案：接口与 协议；委托；mixin与特征
第六章 并发 1.通过分析工作流来提高并发性
2.熟悉黑板系统</description>
    </item>
    
  </channel>
</rss>
