<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>行百里者半九十</title>
    <link>https://xblzbjs.cn/</link>
    <description>Recent content on 行百里者半九十</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xblzbjs.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git｜分支规范</title>
      <link>https://xblzbjs.cn/posts/git/git-%E5%88%86%E6%94%AF%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/git/git-%E5%88%86%E6%94%AF%E8%A7%84%E8%8C%83/</guid>
      <description>工作中为规范开发，保持代码提交记录以及git分支结构和commit message整体清晰易读、方便维护，公司一般都会根据不同的项目规格置顶不同的Git分支规范。
命名规范    在A successful Git branching model文中有一图展示了常见的分支管理规范
![img](/Users/xblzbjs/Desktop/Go Tips/Git | 分支规范.assets/git-model@2x.png)
从上图（自右向左）分别为
 master：主分支。负责管理发布的状态，提交时使用标签记录发布版本号。 hotfix-修复的问题：紧急修复分支。发布的产品需要紧急修正时，就直接从master主分支切出一个分支紧急修改，通常会加上hotfix-前缀，改好后再合并到master分支和develop分支上。 release-版本：预发布分支。开发人员在develop分支开发到了感觉可以发布的状态会创建release分支，为release做最后的bug修正。当感觉release分支上没有问题时，就会将release分支合并到master分支上正式发布。通常一个项目会有多个release分支，例如release-1.0，release-2.0等 develop：开发分支。开发人员的日常开发分支。 feature-功能：功能分支。从develop分支分叉出来的针对新功能的开发分支，通常会有多个feature分支并行开发。完成功能的开发后就把分支合并回develop分支（通常来说，feature分支大多会保留，并不会merge之后就删除原分支）  日志规范     在一个团队协作的项目中，开发人员需要经常提交一些代码去修复bug或者实现新的feature。而项目中的文件和实现什么功能、解决什么问题都会渐渐淡忘，最后需要浪费时间去阅读代码。但是好的日志规范commit messages编写有帮助到我们，它也反映了一个开发人员是否是良好的协作者。
 编写良好的Commit messages的好处：
 加快review的流程 编写良好的版本发布日志 让之后的维护者了解代码里出现特定变化和feature被添加的原因  当前业界应用的比较广泛的是 Angular Git Commit Template
具体格式为:
&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt; &amp;lt;body&amp;gt; &amp;lt;footer&amp;gt; 复制代码  type: 本次 commit 的类型  feat: 添加新特性 fix: 修复bug docs: 仅仅修改了文档 style: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑 refactor: 代码重构，没有加新功能或者修复bug perf: 增加代码进行性能测试 test: 增加测试用例 chore: 改变构建流程、或者增加依赖库、工具等   scope: 本次 commit 波及的范围，例如Compiler, ElementInjector等。 subject: 简明扼要的阐述下本次 commit 的主旨。 body: 包括改变的动机，并将其与以前的行为进行对比。 footer: 描述下与之关联的 issue 或 break change。  Commit messages格式要求    # 标题行：50个字符以内，描述主要变更内容 # # 主体内容：更详细的说明文本，建议72个字符以内。 需要描述的信息包括: # # * 为什么这个变更是必须的?</description>
    </item>
    
    <item>
      <title>DevOps工程师</title>
      <link>https://xblzbjs.cn/learning-materials/devops/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/learning-materials/devops/</guid>
      <description>书籍    《持续交付》 &amp;amp; 《持续交付2.0》    《精益创业》    《Scrum精髓》    《DevOps实践指南》    大会，网站和博客     DEOS ：DevOps 国际峰会，以案例总结著称； DevOpsDays：大名鼎鼎的 DevOpsDays 社区；- - DevOps.com ：综合性网站； Azure DevOps：综合性网站，盛产高质量的电子书； Martin Fowler ：Martin Fowler（一个软件开发方面的著作者和国际知名演说家） 的博客； CloudBees Devops ：Jenkins 背后的公司的博客。  </description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://xblzbjs.cn/learning-materials/go/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/learning-materials/go/</guid>
      <description>书籍    《Go程序设计语言》    经典中的经典，最好看英文版
《Go语言高级编程》（柴树衫/曹春晖著）    CGO和汇编部分十分不错
《Go专家编程》(任洪彩著)    收获很多</description>
    </item>
    
    <item>
      <title>其它</title>
      <link>https://xblzbjs.cn/learning-materials/other/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/learning-materials/other/</guid>
      <description>内功    《程序员修炼之道:通往务实的最高境界》(David Thomas,Andrew Hunt著 云凤译)    对于本科为通信工程的我来说，这本书打开了我的职业大门
《启示录:打造用户喜爱的产品》(Marty Cagan著)    多年以前的产品经验，现在仍有很多值得借鉴、学习。更主要的，大部分产品经理都做不到这本书对产品经历的要求。
《软技能:代码之外的生存指南》(John Z.Sonmez著)    不要只会打代码
《高效程序员的45个习惯:敏捷开发修炼之道》(Andy Hunt/Venkat Subramaniam著)    提升效率</description>
    </item>
    
    <item>
      <title>Go Tips | Map</title>
      <link>https://xblzbjs.cn/posts/go-tips/go-tips-map/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/go-tips/go-tips-map/</guid>
      <description>Tip1 初始化方式    func TestTestInitMap(t *testing.T) { // 方法一（字面量初始化） 	m1 := map[string]int{&amp;#34;Go&amp;#34;: 1, &amp;#34;Java&amp;#34;: 2, &amp;#34;Python&amp;#34;: 3} m2 := map[int]int{} // 方法二（使用内置函数make初始化） 	m3 := make(map[int]int, 10) // 使用len函数打印map的长度, 不能用cap打印容量 	t.Logf(&amp;#34;len m1=%d&amp;#34;, len(m1)) m2[4] = 16 t.Logf(&amp;#34;len m2=%d&amp;#34;, len(m2)) t.Logf(&amp;#34;len m3=%d&amp;#34;, len(m3)) } 以上两者同样是初始化一个Map，有什么不同？
 方法二提前分配了Map的容量，减少内存分配的次数，相比方法一而言性能更好，但是可扩展性更差。  Tip2 增删查改（Create、Delete、Read、Update）    func TestMapCRUD(t *testing.T) { m := make(map[string]int, 10) m[&amp;#34;other&amp;#34;] = 0 // Create 	m[&amp;#34;go&amp;#34;] = 1 t.</description>
    </item>
    
    <item>
      <title>Go Tips | Test</title>
      <link>https://xblzbjs.cn/posts/go-tips/go-tips-test/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/go-tips/go-tips-test/</guid>
      <description>因何而生❓    有时测试程序需要在测试之前或之后进行额外的设置或拆卸。有时测试还需要控制哪些代码在主线程上运行。为了支持这些和其他情况, testing 包提供了 TestMain 函数 :
func TestMain(m *testing.M) 有什么作用🤔    如果测试文件中包含该函数，那么生成的测试将调用 TestMain(m)，而不是直接运行测试。TestMain 运行在主 goroutine 中 , 可以在调用 m.Run 前后做任何设置和拆卸。m. Run将返回可能传递给的退出代码操作系统退出. 如果TestMain返回，测试包装器将m.Run的结果传递给操作系统退出它自己
调用TestMain时，flag.解析尚未运行。如果TestMain依赖于命令行标志，包括测试包的标志，那么它应该调用flag.解析明确地。命令行标志总是由运行的时间测试或基准函数来解析
因此，当您需要为测试执行一些全局设置/删除时，这可能会很方便
举个🌰    简单    // file name: demo_test.go package tests import ( &amp;#34;testing&amp;#34; &amp;#34;os&amp;#34; ) func TestMain(m *testing.M) { log.Println(&amp;#34;Do stuff BEFORE the tests!&amp;#34;) exitVal := m.Run() log.Println(&amp;#34;Do stuff AFTER the tests!&amp;#34;) os.Exit(exitVal) } func TestA(t *testing.</description>
    </item>
    
    <item>
      <title>启示录-打造用户喜爱的产品(产品篇)</title>
      <link>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E4%BA%A7%E5%93%81%E7%AF%87/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E4%BA%A7%E5%93%81%E7%AF%87/</guid>
      <description>产品篇    苹果公司值得学习的四点     硬件为软件服务 软件为用户体验服务 用户体验为情感服务 产品为真正的需求服务  提防有特殊要求的产品    客户在描述需求时，习惯提出自己的解决方案，但不一定抓住了需求的本质。产品经理应该与客户一起梳理需求，发现问题的本质，提供更合理的解决方案。多数用户其实不喜欢定制软件，他们更喜欢通用产品，因为通用产品的兼容性、数据移植性更好，改进速度更快，也更容易获得技术支持。
新瓶装老酒    成功的产品往往不是什么新鲜事物，只是新瓶装老酒，之所以成功，是因为这个“新瓶”做得更好、更方便、更便宜，改变了消费者对“老酒”的印象。
想在成熟的市场抢占一席之地，精明的公司至少要手握两件“法宝”：
 对目标市场了如指掌，对现有产品的缺陷洞若观火。通过产品可用性测试掌握产品情况 跟踪最新的技术趋势。  大众网络服务产品    电子商务、社交网络、搜索引擎、网络游戏
 可用性 人物角色 扩展性 持续可用性 客户服务 保护用户隐私 口碑营销 全球化 平滑部署 用户社区管理  最佳实践经验    打造富有创意产品最重要的十个要点
 产品管理的职责 用户体验 机会评估 特约用户 产品原则 人物角色 探索产品 使用原型 用户参与原型测试 根据数据改进产品  产品经理的反省清单    出色的产品经理会时刻关注产品的现状与未来。以下是产品经理无时无刻不在思考的问题
 产品能吸引目标消费者的关注吗？ 产品的设计是否人性化，是否易于操作？ 产品能在竞争中取胜吗？即使是面对未来风云变化的市场，依旧有取胜的把握吗？ 我了解目标用户吗？产品（不是理想的产品，而是实际开发出来的产品）是否能得到他们的认可？ 产品是否有别于市面上的其他产品？我能在两分钟内向公司高管清楚地阐明这些差别吗？能在一分钟内向客户解释清楚吗？能在半分钟内向经验丰富的行业分析师解释清楚吗？ 产品能正常运行吗？ 产品是否完整？用户对产品的印象如何？销售业绩如何？销售任务能否顺利完成？ 产品的特色是否与目标用户的需求一致？产品特色是否鲜明？ 产品值钱吗？值多少钱？为什么值这么多钱？用户会选择更便宜的产品吗？ 我了解其他团队成员对产品的看法吗？他们觉得产品好在哪里？他们的看法是否与我的观点一致。  </description>
    </item>
    
    <item>
      <title>启示录-打造用户喜爱的产品(人员篇)</title>
      <link>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E4%BA%BA%E5%91%98%E7%AF%87/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E4%BA%BA%E5%91%98%E7%AF%87/</guid>
      <description>关键角色及其职责    1. 产品经理    主要职责
 评估产品机会（product opportunity）  产品需求文档(market requirements document, MRD)结合产品原型 机会评估(opportunity assessment)   定义要开发的产品  基本的产品特征和功能 产品的用户的体验 产品的发布标准    2. 用户体验设计师    主要职责
 与产品经理密切合作，将功能与设计相结合，满足用户需求，确保产品同时具有可用性和价值  注：产品的用户体验是公司的核心竞争力；交互设计不能外包，质量检验更适合外包
3. 项目管理人员    主要职责
 制定计划 跟踪进度  4. 开发团队    注：IT团队通常指的是为内部员工提供技术支持的团队，而开发团队指的是为外部客户开发和维护产品的团队。
5. 运维团队    6. 产品营销人员    主要职责
 对外发布信息、宣传产品 组织重点营销活动 促进产品销售提供支持  注：不推荐让一个人同时负责产品管理和产品营销</description>
    </item>
    
    <item>
      <title>启示录-打造用户喜爱的产品(流程篇)</title>
      <link>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E6%B5%81%E7%A8%8B%E7%AF%87/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/book-notes/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81%E6%B5%81%E7%A8%8B%E7%AF%87/</guid>
      <description>开发富有创意的产品时反复应用的流程和成功的实践经验
评估产品机会    确定待解决的问题    产品经理应该能回答如下十个问题
 产品要解决什么问题？（产品价值※） 为谁解决这个问题？（目标市场） 成功的机会有多大？（市场规模） 怎样判断产品成功与否？（度量指标或收益指标） 有哪些同类产品？（竞争格局） 为什么我们最适合做这个产品？（竞争优势） 时机合适码？（市场时机） 如何把产品推向市场？（营销组合策略） 成功的必要条件是什么？（解决方案要满足的条件） 根据以上问题，给出评估结论（继续或放弃）  产品探索    定义正确的产品      在探索产品的阶段，产品经理负责分析各种创意，广泛搜集用户需求，了解如何运用新技术，拿出产品原型并加以测试，从全局视角思考产品方向，兼顾短期需求和长期规划。
  产品经理必须在执行阶段转换工作中心；否则，产品经理自己很可能成为产品上市的最大障碍。
  采用流水线方式并行开发产品。也就是说，一旦1.0版本的产品进入项目执行阶段，就开始定义2.0的产品。
  产品原则    产品原则是对团队信仰和价值观的总结，用来指导产品团队作出正确的决策和取舍。
确定什么最重要     罗列出产品原则，并按原则的重要性排序 切记原则过于空泛 切记将设计原则当成产品原则  解决意见冲突    在做产品决策之前，应该先确定决策要解决什么问题，让大家在以下几个要点上达成共识。
 究竟要解决什么问题？ 要为哪类人物角色解决这个问题？ 产品要达到什么目标 每项目标的优先级是什么？  产品评审团    制定决策通常是既耗时又费力的。产品公司需要一套机制让决策者和相关人员及时作出明智的产品决策，成立产品评审团是最好的解决途径之一。</description>
    </item>
    
    <item>
      <title>HTTP | 常见的返回状态码</title>
      <link>https://xblzbjs.cn/posts/http/http-%E5%B8%B8%E8%A7%81%E7%9A%84%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/http/http-%E5%B8%B8%E8%A7%81%E7%9A%84%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>状态码的类别    实际上经常使用的大概只有十几种
    类别 原因     1XX Informational（信息性状态码） 接收的请求正在处理   2XX Success（成功状态码） 请求正常处理完毕   3XX Redirection（重定向状态码） 需要进行附加操作以完成请求   4XX Client Error（客户端错误状态码） 服务器无法处理请求   5XX Server Error（服务器错误状态码） 服务器处理请求出错    常用2XX状态码（表明请求被正常处理）        说明     200 OK 正常处理   204 No Content 请求处理成功！但没有资源可返回   206 Partial Content 成功执行范围请求，响应报文中包含由 Content-Range 指定范围的实体内容。    常用3XX状态码（表明浏览器需要执行某些特殊的处理以正确处理）        说明     301 Moved Permanently 永久性重定向。当指定资源路径（例如http://example.</description>
    </item>
    
    <item>
      <title>高效程序员的45个习惯:敏捷开发修炼之道</title>
      <link>https://xblzbjs.cn/book-notes/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/book-notes/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</guid>
      <description>有关敏捷       &amp;ldquo;敏捷&amp;quot;是一种把以人为本、团队合作、快速响应变化和可工作的软件作为宗旨的开发方法
    反馈是敏捷的基础。一旦你意识到走错了方向，就要立即做出决策，改变方向。
    过程符合标准并不意味结果是正确的。敏捷团队重结果胜于重过程。
   自我提升       你要不断从自己写的代码中得到反馈，并且使用自动化工具不断地构建（持续集成）和测试系统。在前进过程中，你都会有意识地修改一些代码：在功能不变的情况下，重新设计部分代码，改善代码的质量。这就是所谓的重构，它是软件开发中不可或缺的一部分——编码永远没有真正意义上的“结束”。
    先难后易。我们首先要解决困难的问题，把简单的问题留到最后.
    不要孤立地编码(Don’t code in isolation)
    要专业而不是自我
    迭代和增量式的学习。每天计划用一段时间来学习新技术，它不需要很长时间，但需要经常进行。记下那些你想学习的东西——当你听到一些不熟悉的术语或者短语时，简要地把它记录下来。然后在计划的时间中深入研究它。
    跟踪技术变化。你不需要精通所有技术，但需要清楚知道行业的动向，从而规划你的项目和职业生涯。
    你不可能精通每一项技术，没有必要去做这样的尝试。只要你在某些方面成为专家，就能使用同样的方法，很容易地成为新领域的专家。
    你要明白为什么需要这项新技术——它试图解决什么样的问题？它可以被用在什么地方？
    不停地问为什么。不能只满足于别人告诉你的表面现象。要不停地提问直到你明白问题的根源。</description>
    </item>
    
    <item>
      <title>Go &amp; Python｜深拷贝与浅拷贝</title>
      <link>https://xblzbjs.cn/posts/design-patterns/go-python%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/design-patterns/go-python%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>背景：    在开发中，经常涉及到数据的传递。在数据传递使用过程中，可能会发生数据被修改的问题。为了防止数据被修改，就需要再传递一个副本，即使副本被修改，也不会影响原数据的使用。为了生成这个副本，就产生了拷贝。
概念：    Python拷贝会涉及到Python中对象、可变类型、引用3个概念，下面一一介绍
 对象：Python对象都拥有三个属性：身份、类型、值。  &amp;gt;&amp;gt;&amp;gt; name = &amp;#34;xblzbjs&amp;#34;	# name对象，值为&amp;#39;xblzbjs&amp;#39; &amp;gt;&amp;gt;&amp;gt; id(name)	# 身份 2016648094384 &amp;gt;&amp;gt;&amp;gt; type(name)	# 类型 &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;  可变类型：在Python中，按更新对象的方式，可以将对象分为2大类：可变对象与不可变对象。
  可变对象： 列表(list)、字典(dict)、集合(set)。所谓可变指可变对象的值可变，身份是不变的。
&amp;gt;&amp;gt;&amp;gt; l1 = [1,2,3] &amp;gt;&amp;gt;&amp;gt; id(l1) 2016648193280 &amp;gt;&amp;gt;&amp;gt; l1 = [1,2] &amp;gt;&amp;gt;&amp;gt; id(l1) 2016648214464 &amp;gt;&amp;gt;&amp;gt; l1[0]=3 &amp;gt;&amp;gt;&amp;gt; l1 [3, 2] &amp;gt;&amp;gt;&amp;gt; id(l1) 2016648214464   不可变对象：数字、字符串(str)、元组(tuple)。不可变对象指对象的身份和值都不可变。新创建的对象被关联到原来的变量名，旧对象被丢弃，垃圾回收器会在适当的时机回收这些对象。
&amp;gt;&amp;gt;&amp;gt; num = 4 &amp;gt;&amp;gt;&amp;gt; id(num) 140710421604224 &amp;gt;&amp;gt;&amp;gt; num = 5 &amp;gt;&amp;gt;&amp;gt; id(num) 140710421604256     引用：在Python程序中，每个对象都会在内存中申请开辟一块空间来保存该对象，该对象在内存中所在位置的地址被称为引用。在开发程序时，所定义的变量名实际就对象的地址引用。引用实际就是内存中的一个数字地址编号，在使用对象时，只要知道这个对象的地址，就可以操作这个对象，但是因为这个数字地址不方便在开发时使用和记忆，所以使用变量名的形式来代替对象的数字地址。</description>
    </item>
    
    <item>
      <title>Git｜diff</title>
      <link>https://xblzbjs.cn/posts/git/gitdiff/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/git/gitdiff/</guid>
      <description>假设你的仓库下有两个分支main和dev    场景一：
比较工作区    # 显示头和工作目录之间的差异。 git diff HEAD #  比较文件    # 比较工作区与最后一次commit提交的仓库的共同文件 git diff # 显示暂存区(已add但未commit文件)和最后一次commit(HEAD)之间的所有不相同文件的增删改 git diff --cached 比较分支    # 显示main和dev有差异的文件(显示更改代码) git diff main dev # 显示main和dev有差异的文件(不显示更改代码) git diff main dev --stat </description>
    </item>
    
    <item>
      <title>Django｜编码规范</title>
      <link>https://xblzbjs.cn/posts/django/django%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/django/django%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description>1.编码风格 Coding Style    1.1 代码可读性    6个忠告:
➤ 避免缩写变量名
➤ 写函数参数名。
➤ 解释类和方法。
➤ 对代码进行注释
➤ 将重复的代码行重构为可重用的功能或方法
➤ 保持函数和方法简短。不应该滚动阅读整个函数或方法
1.2 PEP8(Python Enhancement Proposals)    PEP8文档
PEP8中文翻译文档
1.3 Python import 格式(以Django为例)    # future from __future__ import unicode_literals # 标准包 from math import sqrt from os.path import abspath # Django from django.db import models from django.utils.translation import ugettext_lazy as _ # 第三方包 from django_extensions.</description>
    </item>
    
    <item>
      <title>Django｜项目布局</title>
      <link>https://xblzbjs.cn/posts/django/django%E9%A1%B9%E7%9B%AE%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/django/django%E9%A1%B9%E7%9B%AE%E5%B8%83%E5%B1%80/</guid>
      <description>有许多项目模板可以启动Django项目。这里有两个链接，可使用时，我们引导一个项目:
  cookiecutter-django
  Django包
  默认的项目布局和更好的项目布局    # 默认项目布局  &amp;lt;django_project_root&amp;gt; # 更好的项目布局 &amp;lt;repository_root&amp;gt;/ ├── &amp;lt;configuration_root&amp;gt;/ ├── &amp;lt;django_project_root&amp;gt;/ 仓库根目录 repository_root    &amp;lt;repository_root&amp;gt;目录是项目的绝对根目录. 除了&amp;lt;django_project_root&amp;gt; 和 &amp;lt;configuration_root&amp;gt;, 我们还包括其他关键组件像README.md, docs/ directory, manage.py, .gitignore, requirements.txt 文件和其他高级文件部署和运行项目所需的。
 一些开发人员喜欢将&amp;lt;django_project_root&amp;gt;合并到项目的&amp;lt;repository_root&amp;gt;中。
 Django项目根目录 django_project_root    如果使用 django-admin.py startproject，它生成的Django项目将成为项目根目录。
mysite/ ├── manage.py ├── my_app │ ├── __init__.py │ ├── admin.py │ ├── apps.py │ ├── migrations │ │ └── __init__.</description>
    </item>
    
    <item>
      <title>Go &amp; Python｜创建型设计模式</title>
      <link>https://xblzbjs.cn/posts/design-patterns/go-python%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/design-patterns/go-python%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>常见创建型设计模式     工厂模式（Factory）：解决对象创建问题 构造模式（Builder）：控制复杂对象的创建 原型模式（Prototype）：通过原型的克隆创建新的实例 单例（Borg/Singleton）：一个类只能创建同一个对象 对象池模式（Pool）：预先分配同一类型的一组实例 惰性计算模式（Lazy Evaluation）：延迟计算（python的property）  1.工厂模式    解决了什么问题：
 解决对象创建问题 解耦对象的创建和使用 包括工厂方法和抽象工厂  # 工厂方法 class DogToy: def speak(self): print(&amp;#34;wang wang&amp;#34;) class CatToy: def speak(self): print(&amp;#34;miao miao&amp;#34;) def toy_factory(toy_type): if toy_type == &amp;#39;dog&amp;#39;: return DogToy() elif toy_type == &amp;#39;cat&amp;#39;: return CatToy() 2.构造模式    什么是构造模式：
 用来控制复杂对象的构造 创建和表示分离。比如你要买电脑，工厂模式直接给你需要的电脑 但是构造模式允许你自己定义电脑的配置，组装完成后给你  3.原型模式    什么是原型模式：
 通过克隆原型来创建新的实例 可以通过相同的原型，通过修改部分属性来创建新的实例 用途：对于一些创建实例开销比较高的地方可以用原型模式  4.</description>
    </item>
    
    <item>
      <title>Go &amp; Python｜结构型设计模式</title>
      <link>https://xblzbjs.cn/posts/design-patterns/go-python%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/design-patterns/go-python%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>结构型模式    常见的结构型设计模式：
 工厂模式（Factory）：解决对象创建问题 构造模式（Builder）：控制复杂对象的创建 原型模式（Prototype）：通过原型的克隆创建新的实例 单例（Borg/Singleton）：一个类只能创建同一个对象 对象池模式（Pool）：预先分配同一类型的一组实例 惰性计算模式（Lazy Evaluation）：延迟计算（python的property）  装饰器模式    什么是装饰器（Decorator）
 Python中一切皆对象，函数也可以当作参数传递 装饰器是接受函数作为参数，添加功能后返回一个新函数的函数（类） 通过@使用装饰器  import time def log_time(func): # 接受一个函数作为参数 def _log(*args, **kwargs): beg = time.time() res = func(*args, **kwargs) print(&amp;#39;use time:{}&amp;#39;.format(time.time()-beg)) return res return _log @log_time # @:装饰器语法糖 def mysleep(): time.sleep(1) newsleep = log_time(mysleep) # 等价于mysleep() newsleep() mysleep() import time # 装饰器类实现 class LogTime: def __init__(self, use_int=False): self.use_int = use_int # 增加参数 def __call__(self,func): def _log(*args, **kwargs): beg = time.</description>
    </item>
    
    <item>
      <title>Go &amp; Python｜行为型设计模式</title>
      <link>https://xblzbjs.cn/posts/design-patterns/go-python%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/design-patterns/go-python%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>常见学习行为型设计模式     迭代器模式（Iterator）：通过统一的接口迭代对象 观察者模式（Observer）：对象发生改变的时候，观察者执行相应动作 策略模式（Strategy）：针对不同规模输入使用不同的策略  迭代器模式     Python内置对迭代器模式的支持 可用for遍历各种Iterable的数据类型 可以实现__next__和__iter__实现迭代器  class Stack(object): # 使用组合的例子 def __init__(self): self._deque = deque() def push(self, value): return self._deque.append(value) def pop(self): return self._deque.pop() def empty(self): return len(self._deque) == 0 def __iter__(self): res = [] for i in self._deque: res.append(i) for i in reversed(res): yield i s = Stack() s.push(1) s.push(2) for i in s: print(i) 观察者模式     发布订阅是一种最常用的实现方式 发布订阅用于解耦逻辑 可以通过回调等方式实现，当发生事件，执行回调函数  ==TODO：代码实现==</description>
    </item>
    
    <item>
      <title>Git｜merge</title>
      <link>https://xblzbjs.cn/posts/git/gitmerge/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/git/gitmerge/</guid>
      <description>首先查看当前项目有哪些分支git branch -a等同于 git branch -all
git branch -a 输入后会看到当前项目的所有分支（其中带*的分支为当前分支）
dev *main 假设你需要在dev分支上进行开发，则需要切换到该分支
git checkout dev 这个时候再使用git branch -a命令就会发现当前分支为dev分支
*dev main 在dev分支上进行开发，提交测试没有问题想合并到main分支上，需要进行以下几步:
  查看当前分支的状态并
git status   添加更改文件push到当前分支上
git add . &amp;amp;&amp;amp; git commit -m &amp;#34;update&amp;#34;   将dev分支合并到main分支
git merge dev   检查main分支是否和dev分支的区别（当前处于div分支）
git diff main   </description>
    </item>
    
    <item>
      <title>Git｜基本概念</title>
      <link>https://xblzbjs.cn/posts/git/git%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/git/git%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>git 术语    Repository(仓库)    Working Directory(工作区)    Staging area(暂存区)    Revision(修订)    Tags(标记)    Push(推送)    Pull(拉取)    Indev(索引)    Commit(提交)    Conflict(冲突)    Merge(合并)    Branch(分支)    HEAD(头)    Checkout(检出)    commit(提交)    diff(差异)    fetch(获取)    main/master(主干)    merge request(合并请求)    git文件有四种状态分别是:</description>
    </item>
    
    <item>
      <title>zsh｜主题</title>
      <link>https://xblzbjs.cn/posts/linux/zsh%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/linux/zsh%E4%B8%BB%E9%A2%98/</guid>
      <description>所有主题    我喜欢的自带主题    agnoster    amuse    awesomepanda    clean    crcandy    frisk    jonathan    linuxonly（只能运行在linux）    nanotech    philips    pmcgee    xiong-chiamiov    额外的主题    powerlevel10k    spaceship-prompt    </description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://xblzbjs.cn/about/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/about/</guid>
      <description>喜欢历史和推理小说的全栈DevOps工程师
记录一切美好的事情</description>
    </item>
    
    <item>
      <title>CentOS7 | 安装Python虚拟环境</title>
      <link>https://xblzbjs.cn/posts/linux/centos7-%E5%AE%89%E8%A3%85python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/linux/centos7-%E5%AE%89%E8%A3%85python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>virtualenv和virtualenvwrapper安装    pip 3 安装    pip3 install virtualenv -i https://mirrors.aliyun.com/pypi/simple/ 安装virtualenvwrapper工具管理虚拟环境    pip3 install virtualenvwrapper -i https://mirrors.aliyun.com/pypi/simple/ # 报错 [root@centos ~]# pip3 install virtualenvwrapper -i https://mirrors.aliyun.com/pypi/simple/ Looking in indexes: http://mirrors.tencentyun.com/pypi/simple Collecting virtualenvwrapper Downloading http://mirrors.tencentyun.com/pypi/packages/c1/6b/2f05d73b2d2f2410b48b90d3783a0034c26afa534a4a95ad5f1178d61191/virtualenvwrapper-4.8.4.tar.gz (334 kB) |████████████████████████████████| 334 kB 832 kB/s ERROR: Command errored out with exit status 1: command: /usr/local/python3/bin/python3.7 -c &amp;#39;import sys, setuptools, tokenize; sys.argv[0] = &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;/tmp/pip-install-f3bmqs9b/virtualenvwrapper_891e91f27f1f44e4b94d4cb51de96c5d/setup.py&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;; __file__=&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;/tmp/pip-install-f3bmqs9b/virtualenvwrapper_891e91f27f1f44e4b94d4cb51de96c5d/setup.py&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;;f=getattr(tokenize, &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;open&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;, open)(__file__);code=f.read().replace(&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;\r\n&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;, &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;\n&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;);f.close();exec(compile(code, __file__, &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;exec&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;))&amp;#39; egg_info --egg-base /tmp/pip-pip-egg-info-u879bw4z cwd: /tmp/pip-install-f3bmqs9b/virtualenvwrapper_891e91f27f1f44e4b94d4cb51de96c5d/ Complete output (11 lines): Traceback (most recent call last): File &amp;#34;&amp;lt;string&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; File &amp;#34;/usr/local/python3/lib/python3.</description>
    </item>
    
    <item>
      <title>CentOS7 | 配置Python3环境</title>
      <link>https://xblzbjs.cn/posts/linux/centos7-%E9%85%8D%E7%BD%AEpython3%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/linux/centos7-%E9%85%8D%E7%BD%AEpython3%E7%8E%AF%E5%A2%83/</guid>
      <description>环境：腾讯云CentOS7.5 64位
1. 查看Python的位置并安装相关依赖    [root@centos ~]# whereis python python2: /usr/bin/python2 /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /usr/include/python2.7 /usr/share/man/man1/python2.1.gz python指向的是python2，python2指向的是python2.7，因此我们可以装个python3，然后将python指向python3，然后python2指向python2.7，那么两个版本的python就能共存了。
yum install zlib-devel libffi-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make 2. 使用wget下载Python3源码包    wget http://npm.taobao.org/mirrors/python/3.7.9/Python-3.7.9.tar.xz # 如果提示wget未找到命令, 那么就先使用yum安装wget yum -y install wget 3. 编译Python3源码包    #解压 xz -d Python-3.7.9.tar.xz tar -xf Python-3.7.9.tar #进入解压后的目录，依次执行下面命令进行手动编译 cd Python-3.7.9 ./configure prefix=/usr/local/python3 make &amp;amp;&amp;amp; make install # 如果出现can&amp;#39;t decompress data; zlib not available这个错误，则需要安装相关库 #安装依赖zlib、zlib-devel yum install zlib zlib yum install zlib zlib-devel 4.</description>
    </item>
    
    <item>
      <title>Django｜第三方库</title>
      <link>https://xblzbjs.cn/posts/django/django%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/django/django%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid>
      <description>模型层（model）      django-model-utils
  django-extensions
  Cookiecutter Django’s documentation
  django-countries
  django-crispy-forms
  factory_boy
  Markdown编辑器     django-mdeditor  用户注册     django-allauth: django-registration  后台管理     django-grappelli simpleui  </description>
    </item>
    
    <item>
      <title>MongoDB｜CRUD操作</title>
      <link>https://xblzbjs.cn/posts/database/mongodb/mongodbcrud%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/database/mongodb/mongodbcrud%E6%93%8D%E4%BD%9C/</guid>
      <description>Create(创建)    insertOne()方法    ### insertOne()方法 # 参数含义 db.collection·insertOne() db.&amp;lt;collection&amp;gt;·insertOne( &amp;lt;document&amp;gt; writeConcern：&amp;lt;document&amp;gt;	# &amp;lt;collection&amp;gt;表示写入的集合 # &amp;lt;document&amp;gt;要替换成要写入的文档本身 # writeConcern：&amp;lt;document&amp;gt;定义了本次文档创建操作的安全写级别 ) # 简单来说，安全写级别用来判断一次数据库写入操作是否成功 安全写级别越高，丢失数据的风险就越低，然而写入操作的延迟也可能更高。如果不提供writeconcern文档，用默认的安全写级别。 # 创建单个文档 &amp;gt; db.accounts.insertOne(	# 虽然没有创建过accounts的集合，但该命令会自动创建相应的集合 ... { ... _id: &amp;#34;account1&amp;#34;, ... name: &amp;#34;alice&amp;#34;, ... balance: 100, ... } ... ) { &amp;#34;acknowledged&amp;#34; : true, &amp;#34;insertedId&amp;#34; : &amp;#34;account1&amp;#34; } # &amp;#34;acknowledged&amp;#34;: true表示安全写级别被启用 # 由于在db.collection.insertone()命令中没有提供writeConcern文档，这里显示的是默认的安全写级别启用状态 # &amp;#34;insertedId&amp;#34;显示了被写入的文档的_id # 重复_id创建一个新文档及相对应的报错信息 &amp;gt; db.accounts.insertOne( ... { ... _id: &amp;#34;account1&amp;#34;, .</description>
    </item>
    
    <item>
      <title>MongoDB｜介绍与安装</title>
      <link>https://xblzbjs.cn/posts/database/mongodb/mongodb%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/database/mongodb/mongodb%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</guid>
      <description>MongoDB介绍    MongoDB安装    使用docker安装（推荐）    docker pull mongo # 默认最新 docker pull mongo:4.0 # 指定安装MongoDB4.0版本 # 使用test数据库 &amp;gt; use test switched to db test # 查看test数据库中的集合 &amp;gt; show collections # 现在test数据库里还没有集合 &amp;gt; </description>
    </item>
    
    <item>
      <title>程序员修炼之道</title>
      <link>https://xblzbjs.cn/book-notes/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E7%AC%AC2%E7%89%88/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/book-notes/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E7%AC%AC2%E7%89%88/</guid>
      <description>第一章 务实的哲学    1.不害怕承认无知和错误,不要把问题归咎于他人,不要找借口
2.承担责任.具体方式:任何你负责的事情应该考虑:
planA:最优方案;
planB:通常方案;
planC:应急方案
3.做项目,写代码不要得过且过,不拖拉,不放弃(这点吃了大亏,很多时候项目完成一半就不想再做下去).
4.不要只是因为一些东西非常紧急,就去造成附带伤害.(不要因为某一项模块或者功能很紧急就去破坏另一个模块甚至整个架构)
5.留意着大局,不要只顾着埋头写代码.
6.没有十全十美的软件和代码,完成80%功能上线,之后不断完善代码比完成100%功能再上线好.因为只有流量才能慢慢显示出不足,才能接着完善.不要让过度的修饰和精炼侵蚀掉一个完好的程序.
7.投资知识(重点)
每年学习一门新语言(最好至少掌握一门动态+一门静态)
每月读一本技术书
每个季度读一本非技术书(历史,地理,小说,文学等等)
每个季度学一门课(完成一个相关技术的项目.B站,慕课网,腾讯课堂,网易云课堂等)
加入相关技术的QQ群交流(人外有人,群里很多大佬),遇到不懂的问题就在上面问别拖
与时俱进,关心当前项目不同的技术.
8.批判性地分析你读到的和听到的东西,简而言之独立思考
9.寻找基础模型
10.交流(重点),程序员才不是木讷的!!!
了解听众的需求,兴趣,和能力
明白自己想说什么.用最少的话表达自己的意思
选择合适的时机与他人交流
适当倾听,懂得让别人参与你的话题
每个人的性格不同,做事方式不同,灵活调整表达方式.
不要口臭
11.非API的注释应只用来讨论其为何存在及其意图,目标.
第二章 务实的方法    1.信奉ETC（Easier To Change）原则。保存文件时、写测试时、修复Bug时常问自己：“我刚刚做的事情是让整个系统更容易改变还是更难改变？”
2.DRY原则：在一个系统中，每一处知识都必须单一、明确地表达。DRY针对的是对知识和意图的复制，而不是简单的复制粘贴（因此并非所有的代码重复都是知识的重复）。
3.不要依赖那些你无法控制的东西！！！！（不要使用超过自己理解的技术，维护起来会很困难）
4.设计与现实世界的变化有多大程度的解耦？
5.考虑在体系结构、部署和供应商集成方面保持灵活性
6.曳光弹式开发（核心思想：即时反馈）
7.收集需求、设计、编码、发布，这套传统的方法要在知道“需求是什么”的前提下才有效
8.对一个项目完成时间（模块功能的完成时间等）要有一个估算（时间、技术、突发状况、人员等）
9.根据代码不断迭代进度表
第三章 基础工具    1.好记性不如烂笔头（做一个项目最好做思维导图，开发中遇到的困难也记录下来）
2.定制专属于你的Shell以提高生产力
3.熟悉2款编辑器的使用，不要多但也不要只会1款
4.学好git（gitee和github都要回）
5.去解决问题，而不是责备
6.学会读那些该死的报错
7.完成一步，测试一步，再接着走
8.学会Markdown
第四章 务实的偏执    1.程序不会说谎，你错就是你错了
2.程序会崩溃，但别改成垃圾
3.使用断言去预防不可能的事情
4.管理好资源（有始有终）
5**.永远不要进行“太大”的步骤或任务**</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://xblzbjs.cn/learning-materials/python/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/learning-materials/python/</guid>
      <description>入门    《Python编程:从入门到实践》(Eric Matthes著)    入门必读
《深入理解Python特性》&amp;amp;&amp;amp;《Effective Python 90 Specific Ways to Write Better Python by Brett Slatkin》    前者中文版读的还可以，《Effective Python 90 Specific Ways》写的十分好，收益很多，推荐。
Django    《Python Django开发实战(视频讲解版)》(张虎著)    结合Django官方文档看，查漏补缺的一本书。注意这本书的项目只是辅助知识点，项目本身比较简陋，
《Django 3 by Example》(Antonio Mele著)    例子丰富，适合刚有Django基础的人依葫芦画瓢找感觉
《Two Scoops of Django 3.1》(Daniel Roy Greenfeld,Audrey Roy Greenfeld)    目前为止看到的最好的一本Django书
《Django 3 Web Development Cookbook Actionable solutions to common problems in Python web development by Aidas Bendoraitis, Jake Kronika》    对得起书名。适合用Django建立复杂项目的朋友看。</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://xblzbjs.cn/archive/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/archive/</guid>
      <description>分类     设计模式(Go &amp;amp; Python)  标签     HTTP/HTTPS Django Linux Go Python 读书笔记 Git 数据库  系列     Go Tips MongoDB 入门  </description>
    </item>
    
  </channel>
</rss>
