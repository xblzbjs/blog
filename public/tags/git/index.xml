<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on 行百里者半九十</title>
    <link>https://xblzbjs.cn/tags/git/</link>
    <description>Recent content in git on 行百里者半九十</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xblzbjs.cn/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git｜分支规范</title>
      <link>https://xblzbjs.cn/posts/git/git-%E5%88%86%E6%94%AF%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/git/git-%E5%88%86%E6%94%AF%E8%A7%84%E8%8C%83/</guid>
      <description>工作中为规范开发，保持代码提交记录以及git分支结构和commit message整体清晰易读、方便维护，公司一般都会根据不同的项目规格置顶不同的Git分支规范。
命名规范    在A successful Git branching model文中有一图展示了常见的分支管理规范
![img](/Users/xblzbjs/Desktop/Go Tips/Git | 分支规范.assets/git-model@2x.png)
从上图（自右向左）分别为
 master：主分支。负责管理发布的状态，提交时使用标签记录发布版本号。 hotfix-修复的问题：紧急修复分支。发布的产品需要紧急修正时，就直接从master主分支切出一个分支紧急修改，通常会加上hotfix-前缀，改好后再合并到master分支和develop分支上。 release-版本：预发布分支。开发人员在develop分支开发到了感觉可以发布的状态会创建release分支，为release做最后的bug修正。当感觉release分支上没有问题时，就会将release分支合并到master分支上正式发布。通常一个项目会有多个release分支，例如release-1.0，release-2.0等 develop：开发分支。开发人员的日常开发分支。 feature-功能：功能分支。从develop分支分叉出来的针对新功能的开发分支，通常会有多个feature分支并行开发。完成功能的开发后就把分支合并回develop分支（通常来说，feature分支大多会保留，并不会merge之后就删除原分支）  日志规范     在一个团队协作的项目中，开发人员需要经常提交一些代码去修复bug或者实现新的feature。而项目中的文件和实现什么功能、解决什么问题都会渐渐淡忘，最后需要浪费时间去阅读代码。但是好的日志规范commit messages编写有帮助到我们，它也反映了一个开发人员是否是良好的协作者。
 编写良好的Commit messages的好处：
 加快review的流程 编写良好的版本发布日志 让之后的维护者了解代码里出现特定变化和feature被添加的原因  当前业界应用的比较广泛的是 Angular Git Commit Template
具体格式为:
&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt; &amp;lt;body&amp;gt; &amp;lt;footer&amp;gt; 复制代码  type: 本次 commit 的类型  feat: 添加新特性 fix: 修复bug docs: 仅仅修改了文档 style: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑 refactor: 代码重构，没有加新功能或者修复bug perf: 增加代码进行性能测试 test: 增加测试用例 chore: 改变构建流程、或者增加依赖库、工具等   scope: 本次 commit 波及的范围，例如Compiler, ElementInjector等。 subject: 简明扼要的阐述下本次 commit 的主旨。 body: 包括改变的动机，并将其与以前的行为进行对比。 footer: 描述下与之关联的 issue 或 break change。  Commit messages格式要求    # 标题行：50个字符以内，描述主要变更内容 # # 主体内容：更详细的说明文本，建议72个字符以内。 需要描述的信息包括: # # * 为什么这个变更是必须的?</description>
    </item>
    
    <item>
      <title>Git｜diff</title>
      <link>https://xblzbjs.cn/posts/git/gitdiff/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/git/gitdiff/</guid>
      <description>假设你的仓库下有两个分支main和dev    场景一：
比较工作区    # 显示头和工作目录之间的差异。 git diff HEAD #  比较文件    # 比较工作区与最后一次commit提交的仓库的共同文件 git diff # 显示暂存区(已add但未commit文件)和最后一次commit(HEAD)之间的所有不相同文件的增删改 git diff --cached 比较分支    # 显示main和dev有差异的文件(显示更改代码) git diff main dev # 显示main和dev有差异的文件(不显示更改代码) git diff main dev --stat </description>
    </item>
    
    <item>
      <title>Git｜merge</title>
      <link>https://xblzbjs.cn/posts/git/gitmerge/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/git/gitmerge/</guid>
      <description>首先查看当前项目有哪些分支git branch -a等同于 git branch -all
git branch -a 输入后会看到当前项目的所有分支（其中带*的分支为当前分支）
dev *main 假设你需要在dev分支上进行开发，则需要切换到该分支
git checkout dev 这个时候再使用git branch -a命令就会发现当前分支为dev分支
*dev main 在dev分支上进行开发，提交测试没有问题想合并到main分支上，需要进行以下几步:
  查看当前分支的状态并
git status   添加更改文件push到当前分支上
git add . &amp;amp;&amp;amp; git commit -m &amp;#34;update&amp;#34;   将dev分支合并到main分支
git merge dev   检查main分支是否和dev分支的区别（当前处于div分支）
git diff main   </description>
    </item>
    
    <item>
      <title>Git｜基本概念</title>
      <link>https://xblzbjs.cn/posts/git/git%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/git/git%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>git 术语    Repository(仓库)    Working Directory(工作区)    Staging area(暂存区)    Revision(修订)    Tags(标记)    Push(推送)    Pull(拉取)    Indev(索引)    Commit(提交)    Conflict(冲突)    Merge(合并)    Branch(分支)    HEAD(头)    Checkout(检出)    commit(提交)    diff(差异)    fetch(获取)    main/master(主干)    merge request(合并请求)    git文件有四种状态分别是:</description>
    </item>
    
  </channel>
</rss>
