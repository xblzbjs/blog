<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 行百里者半九十</title>
    <link>https://xblzbjs.cn/tags/python/</link>
    <description>Recent content in python on 行百里者半九十</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xblzbjs&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 17 Mar 2021 10:13:27 +0800</lastBuildDate><atom:link href="https://xblzbjs.cn/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CentOS7安装Python虚拟环境</title>
      <link>https://xblzbjs.cn/article/2021/03/centos7%E5%AE%89%E8%A3%85python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 17 Mar 2021 10:13:27 +0800</pubDate>
      
      <guid>https://xblzbjs.cn/article/2021/03/centos7%E5%AE%89%E8%A3%85python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>virtualenv和virtualenvwrapper安装 pip 3 安装 pip3 install virtualenv -i https://mirrors.aliyun.com/pypi/simple/ 安装virtualenvwrapper工具管理虚拟环境 pip3 install virtualenvwrapper -i https://mirrors.aliyun.com/pypi/simple/ # 报错 [root@centos ~]# pip3 install virtualenvwrapper -i https://mirrors.aliyun.com/pypi/simple/ Looking in indexes: http://mirrors.tencentyun.com/pypi/simple Collecting virtualenvwrapper Downloading http://mirrors.tencentyun.com/pypi/packages/c1/6b/2f05d73b2d2f2410b48b90d3783a0034c26afa534a4a95ad5f1178d61191/virtualenvwrapper-4.8.4.tar.gz (334 kB) |████████████████████████████████| 334 kB 832 kB/s ERROR: Command errored out with exit status 1: command: /usr/local/python3/bin/python3.7 -c &amp;#39;import sys, setuptools, tokenize; sys.argv[0] = &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;/tmp/pip-install-f3bmqs9b/virtualenvwrapper_891e91f27f1f44e4b94d4cb51de96c5d/setup.py&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;; __file__=&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;/tmp/pip-install-f3bmqs9b/virtualenvwrapper_891e91f27f1f44e4b94d4cb51de96c5d/setup.py&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;;f=getattr(tokenize, &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;open&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;, open)(__file__);code=f.read().replace(&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;\r\n&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;, &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;\n&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;);f.close();exec(compile(code, __file__, &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;exec&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;))&amp;#39; egg_info --egg-base /tmp/pip-pip-egg-info-u879bw4z cwd: /tmp/pip-install-f3bmqs9b/virtualenvwrapper_891e91f27f1f44e4b94d4cb51de96c5d/ Complete output (11 lines): Traceback (most recent call last): File &amp;#34;&amp;lt;string&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; File &amp;#34;/usr/local/python3/lib/python3.</description>
    </item>
    
    <item>
      <title>CentOS7安装并配置Python3环境</title>
      <link>https://xblzbjs.cn/article/2021/03/centos7%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEpython3%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 17 Mar 2021 10:13:27 +0800</pubDate>
      
      <guid>https://xblzbjs.cn/article/2021/03/centos7%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEpython3%E7%8E%AF%E5%A2%83/</guid>
      <description>环境：腾讯云CentOS7.5 64位
1. 查看Python的位置并安装相关依赖 [root@centos ~]# whereis python python2: /usr/bin/python2 /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /usr/include/python2.7 /usr/share/man/man1/python2.1.gz python指向的是python2，python2指向的是python2.7，因此我们可以装个python3，然后将python指向python3，然后python2指向python2.7，那么两个版本的python就能共存了。
yum install zlib-devel libffi-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make 2. 使用wget下载Python3源码包 wget http://npm.taobao.org/mirrors/python/3.7.9/Python-3.7.9.tar.xz # 如果提示wget未找到命令, 那么就先使用yum安装wget yum -y install wget 3. 编译Python3源码包 #解压 xz -d Python-3.7.9.tar.xz tar -xf Python-3.7.9.tar #进入解压后的目录，依次执行下面命令进行手动编译 cd Python-3.7.9 ./configure prefix=/usr/local/python3 make &amp;amp;&amp;amp; make install # 如果出现can&amp;#39;t decompress data; zlib not available这个错误，则需要安装相关库 #安装依赖zlib、zlib-devel yum install zlib zlib yum install zlib zlib-devel 4.</description>
    </item>
    
    <item>
      <title>Django｜第三方库</title>
      <link>https://xblzbjs.cn/article/2021/03/django%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link>
      <pubDate>Wed, 17 Mar 2021 10:13:27 +0800</pubDate>
      
      <guid>https://xblzbjs.cn/article/2021/03/django%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid>
      <description>模型层（model）：   django-model-utils
  django-extensions
  Cookiecutter Django’s documentation
  django-countries
  django-crispy-forms
  factory_boy
  Markdown编辑器:  django-mdeditor  用户注册:  django-allauth: django-registration  后台管理：  django-grappelli simpleui  </description>
    </item>
    
    <item>
      <title>Django｜项目布局</title>
      <link>https://xblzbjs.cn/article/2021/03/django%E9%A1%B9%E7%9B%AE%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 17 Mar 2021 10:13:27 +0800</pubDate>
      
      <guid>https://xblzbjs.cn/article/2021/03/django%E9%A1%B9%E7%9B%AE%E5%B8%83%E5%B1%80/</guid>
      <description>有许多项目模板可以启动Django项目。这里有两个链接，可使用时，我们引导一个项目:
  cookiecutter-django
  Django包
  默认的项目布局和更好的项目布局 # 默认项目布局  &amp;lt;django_project_root&amp;gt; # 更好的项目布局 &amp;lt;repository_root&amp;gt;/ ├── &amp;lt;configuration_root&amp;gt;/ ├── &amp;lt;django_project_root&amp;gt;/ 仓库根目录 repository_root &amp;lt;repository_root&amp;gt;目录是项目的绝对根目录. 除了&amp;lt;django_project_root&amp;gt; 和 &amp;lt;configuration_root&amp;gt;, 我们还包括其他关键组件像README.md, docs/ directory, manage.py, .gitignore, requirements.txt 文件和其他高级文件部署和运行项目所需的。
 一些开发人员喜欢将&amp;lt;django_project_root&amp;gt;合并到项目的&amp;lt;repository_root&amp;gt;中。
 Django项目根目录 django_project_root 如果使用 django-admin.py startproject，它生成的Django项目将成为项目根目录。
mysite/ ├── manage.py ├── my_app │ ├── __init__.py │ ├── admin.py │ ├── apps.py │ ├── migrations │ │ └── __init__.py │ ├── models.py │ ├── tests.py │ └── views.</description>
    </item>
    
    <item>
      <title>Django｜编码规范</title>
      <link>https://xblzbjs.cn/article/2021/03/django%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Tue, 16 Mar 2021 14:51:01 +0800</pubDate>
      
      <guid>https://xblzbjs.cn/article/2021/03/django%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description>1.编码风格 Coding Style 1.1 代码可读性 6个忠告:
➤ 避免缩写变量名
➤ 写函数参数名。
➤ 解释类和方法。
➤ 对代码进行注释
➤ 将重复的代码行重构为可重用的功能或方法
➤ 保持函数和方法简短。不应该滚动阅读整个函数或方法
1.2 PEP8(Python Enhancement Proposals) PEP8文档
PEP8中文翻译文档
1.3 Python import 格式(以Django为例) # future from __future__ import unicode_literals # 标准包 from math import sqrt from os.path import abspath # Django from django.db import models from django.utils.translation import ugettext_lazy as _ # 第三方包 from django_extensions.db.models import TimeStampedModel # 自己写的包 from .models import BananaSplit # try/except try: import yaml except ImportError: yaml = None CONSTANT = &amp;#39;foo&amp;#39; class Example: # .</description>
    </item>
    
  </channel>
</rss>
