<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on xblzbjs</title>
    <link>https://xblzbjs.cn/tags/web/</link>
    <description>Recent content in Web on xblzbjs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 23 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xblzbjs.cn/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTTP | 常见的返回状态码</title>
      <link>https://xblzbjs.cn/posts/web/http-%E5%B8%B8%E8%A7%81%E7%9A%84%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/web/http-%E5%B8%B8%E8%A7%81%E7%9A%84%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>状态码的类别    实际上经常使用的大概只有十几种
    类别 原因     1XX Informational（信息性状态码） 接收的请求正在处理   2XX Success（成功状态码） 请求正常处理完毕   3XX Redirection（重定向状态码） 需要进行附加操作以完成请求   4XX Client Error（客户端错误状态码） 服务器无法处理请求   5XX Server Error（服务器错误状态码） 服务器处理请求出错    常用2XX状态码（表明请求被正常处理）        说明     200 OK 正常处理   204 No Content 请求处理成功！但没有资源可返回   206 Partial Content 成功执行范围请求，响应报文中包含由 Content-Range 指定范围的实体内容。    常用3XX状态码（表明浏览器需要执行某些特殊的处理以正确处理）        说明     301 Moved Permanently 永久性重定向。当指定资源路径（例如http://example.</description>
    </item>
    
    <item>
      <title>什么是基于令牌的身份认证</title>
      <link>https://xblzbjs.cn/posts/web/%E4%BB%80%E4%B9%88%E6%98%AF%E5%9F%BA%E4%BA%8E%E4%BB%A4%E7%89%8C%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xblzbjs.cn/posts/web/%E4%BB%80%E4%B9%88%E6%98%AF%E5%9F%BA%E4%BA%8E%E4%BB%A4%E7%89%8C%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</guid>
      <description>前言    在讨论Token-Based Authentication（基于令牌的身份认证）之前，先来回顾一下过去是怎么做的。
我们都知道，HTTP协议是无状态的，也就是说，如果我们已经认证了一个用户，那么他下一次请求的时候，服务器不知道我是谁，我们必须再次认证。过去的做法是将已经认证过的用户信息存储到服务器上，比如Session，用户下次请求的时候带着Session ID。如下图
基于令牌的身份认证（Token-Based Authentication）    为什么使用    由于基于服务器的身份认证方式存在一些问题：
 每次用户认证通过以后，服务器需要创建一条记录保存用户信息，通常是在内存中，随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大。 由于Session是在内存中的，这就带来一些扩展性的问题。 当我们想要扩展我们的应用，让我们的数据被多个移动设备使用时，我们必须考虑跨资源共享问题。 用户很容易受到CSRF攻击。  因此就有基于令牌的身份认证
工作流程     用户输入他们的用户名和密码以获取允许他们获取特定资源的令牌。 用户就可以向远程站点提供令牌（而不是用户名和密码）——在一段时间内提供对特定资源的访问。  流程图如下：
换句话说：为身份验证添加一个间接级别——用户不必为每个受保护的资源使用用户名和密码进行身份验证，而是以这种方式进行一次身份验证（在有限持续时间的会话内），作为回报获得一个限时令牌，并在会话期间使用该令牌进行进一步的身份验证。
优点     Token存储在客户端，完全无状态，扩展性强 Token不是Cookie，每次请求Token都会被发送，由于没有Cookie被发送，有助于防止CSRF攻击。即使你将token存储到客户端的Cookie中，但是这个Cookie只是一个存储体，并不能用作身份认证。 Token在一段时间后会过期，这个时候用户需要重新登录，提高了安全性。  缺点     服务器端失去了对session的掌控权，例如无法注销特定用户的token，直到token自己过期。  </description>
    </item>
    
  </channel>
</rss>
